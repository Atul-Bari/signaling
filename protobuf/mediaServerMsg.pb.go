// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: mediaServerMsg.proto

package protobuf

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Invite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string            `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Host      string            `protobuf:"bytes,2,opt,name=Host,proto3" json:"Host,omitempty"`
	Peer      string            `protobuf:"bytes,3,opt,name=Peer,proto3" json:"Peer,omitempty"`
	Jsep      map[string]string `protobuf:"bytes,4,rep,name=Jsep,proto3" json:"Jsep,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SessionID string            `protobuf:"bytes,5,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	Record    bool              `protobuf:"varint,6,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *Invite) Reset() {
	*x = Invite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaServerMsg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invite) ProtoMessage() {}

func (x *Invite) ProtoReflect() protoreflect.Message {
	mi := &file_mediaServerMsg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invite.ProtoReflect.Descriptor instead.
func (*Invite) Descriptor() ([]byte, []int) {
	return file_mediaServerMsg_proto_rawDescGZIP(), []int{0}
}

func (x *Invite) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Invite) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Invite) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *Invite) GetJsep() map[string]string {
	if x != nil {
		return x.Jsep
	}
	return nil
}

func (x *Invite) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Invite) GetRecord() bool {
	if x != nil {
		return x.Record
	}
	return false
}

var File_mediaServerMsg_proto protoreflect.FileDescriptor

var file_mediaServerMsg_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0xe4, 0x01, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x4a, 0x73, 0x65, 0x70,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x4a, 0x73, 0x65, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x4a, 0x73, 0x65, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a,
	0x37, 0x0a, 0x09, 0x4a, 0x73, 0x65, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x84, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x6b,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x11, 0x2e, 0x73, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x10, 0x62, 0x69, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x11, 0x2e, 0x73, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x0d, 0x5a, 0x0b, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mediaServerMsg_proto_rawDescOnce sync.Once
	file_mediaServerMsg_proto_rawDescData = file_mediaServerMsg_proto_rawDesc
)

func file_mediaServerMsg_proto_rawDescGZIP() []byte {
	file_mediaServerMsg_proto_rawDescOnce.Do(func() {
		file_mediaServerMsg_proto_rawDescData = protoimpl.X.CompressGZIP(file_mediaServerMsg_proto_rawDescData)
	})
	return file_mediaServerMsg_proto_rawDescData
}

var file_mediaServerMsg_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_mediaServerMsg_proto_goTypes = []interface{}{
	(*Invite)(nil), // 0: samespace.invite
	nil,            // 1: samespace.invite.JsepEntry
}
var file_mediaServerMsg_proto_depIdxs = []int32{
	1, // 0: samespace.invite.Jsep:type_name -> samespace.invite.JsepEntry
	0, // 1: samespace.Makecall.inviteExchange:input_type -> samespace.invite
	0, // 2: samespace.Makecall.biInviteExchange:input_type -> samespace.invite
	0, // 3: samespace.Makecall.inviteExchange:output_type -> samespace.invite
	0, // 4: samespace.Makecall.biInviteExchange:output_type -> samespace.invite
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_mediaServerMsg_proto_init() }
func file_mediaServerMsg_proto_init() {
	if File_mediaServerMsg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mediaServerMsg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Invite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mediaServerMsg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mediaServerMsg_proto_goTypes,
		DependencyIndexes: file_mediaServerMsg_proto_depIdxs,
		MessageInfos:      file_mediaServerMsg_proto_msgTypes,
	}.Build()
	File_mediaServerMsg_proto = out.File
	file_mediaServerMsg_proto_rawDesc = nil
	file_mediaServerMsg_proto_goTypes = nil
	file_mediaServerMsg_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MakecallClient is the client API for Makecall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MakecallClient interface {
	InviteExchange(ctx context.Context, in *Invite, opts ...grpc.CallOption) (*Invite, error)
	BiInviteExchange(ctx context.Context, opts ...grpc.CallOption) (Makecall_BiInviteExchangeClient, error)
}

type makecallClient struct {
	cc grpc.ClientConnInterface
}

func NewMakecallClient(cc grpc.ClientConnInterface) MakecallClient {
	return &makecallClient{cc}
}

func (c *makecallClient) InviteExchange(ctx context.Context, in *Invite, opts ...grpc.CallOption) (*Invite, error) {
	out := new(Invite)
	err := c.cc.Invoke(ctx, "/samespace.Makecall/inviteExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *makecallClient) BiInviteExchange(ctx context.Context, opts ...grpc.CallOption) (Makecall_BiInviteExchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Makecall_serviceDesc.Streams[0], "/samespace.Makecall/biInviteExchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &makecallBiInviteExchangeClient{stream}
	return x, nil
}

type Makecall_BiInviteExchangeClient interface {
	Send(*Invite) error
	Recv() (*Invite, error)
	grpc.ClientStream
}

type makecallBiInviteExchangeClient struct {
	grpc.ClientStream
}

func (x *makecallBiInviteExchangeClient) Send(m *Invite) error {
	return x.ClientStream.SendMsg(m)
}

func (x *makecallBiInviteExchangeClient) Recv() (*Invite, error) {
	m := new(Invite)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MakecallServer is the server API for Makecall service.
type MakecallServer interface {
	InviteExchange(context.Context, *Invite) (*Invite, error)
	BiInviteExchange(Makecall_BiInviteExchangeServer) error
}

// UnimplementedMakecallServer can be embedded to have forward compatible implementations.
type UnimplementedMakecallServer struct {
}

func (*UnimplementedMakecallServer) InviteExchange(context.Context, *Invite) (*Invite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteExchange not implemented")
}
func (*UnimplementedMakecallServer) BiInviteExchange(Makecall_BiInviteExchangeServer) error {
	return status.Errorf(codes.Unimplemented, "method BiInviteExchange not implemented")
}

func RegisterMakecallServer(s *grpc.Server, srv MakecallServer) {
	s.RegisterService(&_Makecall_serviceDesc, srv)
}

func _Makecall_InviteExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MakecallServer).InviteExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samespace.Makecall/InviteExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MakecallServer).InviteExchange(ctx, req.(*Invite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Makecall_BiInviteExchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MakecallServer).BiInviteExchange(&makecallBiInviteExchangeServer{stream})
}

type Makecall_BiInviteExchangeServer interface {
	Send(*Invite) error
	Recv() (*Invite, error)
	grpc.ServerStream
}

type makecallBiInviteExchangeServer struct {
	grpc.ServerStream
}

func (x *makecallBiInviteExchangeServer) Send(m *Invite) error {
	return x.ServerStream.SendMsg(m)
}

func (x *makecallBiInviteExchangeServer) Recv() (*Invite, error) {
	m := new(Invite)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Makecall_serviceDesc = grpc.ServiceDesc{
	ServiceName: "samespace.Makecall",
	HandlerType: (*MakecallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "inviteExchange",
			Handler:    _Makecall_InviteExchange_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "biInviteExchange",
			Handler:       _Makecall_BiInviteExchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mediaServerMsg.proto",
}
